@inherits Merchello.Web.Mvc.MerchelloTemplatePage
@using Merchello.Web
@using Merchello.Web.Models.ContentEditing

@{
    Layout = "RosettaBasePage.cshtml";
}


<div class="row">
    <!-- This is a header for the category page/grouping we're looking at -->
    <h1>@CurrentPage.Name</h1>
    
  
    <!-- Loop through each product (Umbraco content item, technically, but because we're in a product category where every page = product it works the same) and make a list -->
  
    @foreach (IPublishedContent contentProduct in CurrentPage.Children.Where("Visible"))
    {
        <!-- Helper function "DisplayTheProduct" creates <li> display for each individual item -->
        @DisplayTheProduct(contentProduct)
    }   

</div>


<div class="content" style="clear:both;margin-bottom:20px;">
    @CurrentPage.instruction
</div>

<!-- Helper function that accepts Umbraco content item as parameter. Returns a visual display for each individual product in the list. -->
@helper DisplayTheProduct(IPublishedContent productPage)
{
    var product = Merchello.Product(productPage.GetPropertyValue("merchelloProduct").ToString());  
   
       
    <div class="col-lg-4 col-md-6 hero-feature resource">
        <a href="@productPage.Url">
        <div class="thumbnail">
            @if (productPage.HasProperty("productImage") && productPage.HasValue("productImage"))
            {
                IPublishedContent image = Umbraco.Media(productPage.GetPropertyValue("productImage"));
                
            <!-- Product image is one of the Umbraco content-picker properties we assigned to the Product's document type. -->
            <!-- This is pretty much a hack for the sake of reference; we're restricting the image size to use it as a thumbnail. -->
           
                <img src="@image.Url" alt="@image.Name" class="img-responsive" />
            }

            <div class="caption">
                  <!-- Not that productPage.Name would give us Umbraco's page name, but prouct.Name gives us the Merchello product name -->
                <h2>@product.Name</h2> 
                <!-- Here's one way to verify that a Umbraco content page is linked to a Merchello Product: -->
            <!--   By checking the merchelloProduct picker we've set up for the Umbraco content page -->
            @if (productPage.HasProperty("merchelloProduct") && productPage.HasValue("merchelloProduct"))
            {
                
                var merchProduct = Merchello.Product(productPage.GetPropertyValue<string>("merchelloProduct"));
                if (merchProduct != null)
                { 
                    
                <!-- Show the word "from" if product has variants (to indicate that there are more prices), otherwise display the price using GetFromPrice function -->
                @(merchProduct.ProductVariants.Any() ? MvcHtmlString.Create("<em>from</em> ") : MvcHtmlString.Empty) @GetFromPrice(merchProduct)
                }
            }
                        
                
            </div>
        </div>
        </a>
    </div>
    
}


@section ViewList
{

    @RosettaHelper.GetViewBoxHtml("RosettaProductCategory.cshtml","This view iterates through each product in the category you're viewing.", new string[] { RosettaHelper.InheritsMerchelloTemplatePage, RosettaHelper.UsingMerchelloWeb, RosettaHelper.UsingMerchelloContentEditing })

    
}



@functions
{

    private string GetFromPrice(ProductDisplay product)
    {
        if (product == null) return string.Empty;
        if (product.ProductVariants.Any())
        {
            return product.ProductVariants.OrderBy(x => x.Price).First().Price.ToString("C");
        }
        return product.Price.ToString("C");
    }

}

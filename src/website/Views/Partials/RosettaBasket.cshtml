@inherits Merchello.Web.Mvc.MerchelloViewPage<BasketViewModel>
@using Controllers
@using Models

@{
    //these are hard coded with URLs for our store
    const string continueShoppingUrl = "/catalog/";
    const string checkoutStep1Url = "/checkout/checkout-1-shipping-address/";
}


@(Model.Items.Any() ? RenderBasket(continueShoppingUrl, checkoutStep1Url) : RenderEmpty(continueShoppingUrl))


@helper RenderEmpty(string continueShoppingUrl)
{
    <p><a href="@continueShoppingUrl">There's nothing in your shopping cart, start shopping!</a></p>
}


@helper RenderBasket(string continueShoppingUrl, string checkoutStep1Url)
{
    
    // Renders an "Updatable" basket
    
    using(Html.BeginUmbracoForm<BasketController>("UpdateBasket"))
    {
        // In a real world implementation you could consider putting the column headers in
        // an Umbraco Dictionary 
        <table class="table">
            <thead>
                <tr>
            	    <th class="name">Product</th>
            	    <th class="price">Price</th>
            	    <th class="quantity">Quantity</th>
            	    <th class="total">Total</th>
            	    <th class="delete">Delete</th>
                </tr>
            </thead>
            <tbody>
            @{
                // iterates through every line item in the basket.  A for loop is used here
                // so that MVC will properly create the references to the Quantity fields that
                // are posted back to the controller to be updated.
                for (var i = 0; i < Model.Items.Count(); i++)
                {
                            
                    // gets the associated Umbraco content.
                    // ** This is accomplished through the umbracoContentId being injected into the line item extendedData
                    // ** and provides an example of the sorts of things you can do per line item with custom extendedData values.
                    var content = Model.Items[i].ContentId != 0 ? Umbraco.TypedContent(Model.Items[i].ContentId) : null;
            
                    <tr>
                        <td class="image">
                            @if (content == null)
                            {
		               
		                        <span>@Model.Items[i].Name</span>
                            }
                            else
                            {
                                if (content.HasValue("productImage"))
                                {
                                    var src = Umbraco.Media(content.GetPropertyValue("productImage")).Url;
                                    <a href="@content.Url"><img src="@src" alt="@Model.Items[i].Name" width="20" /></a>
                                }
                          
                            
                                <a href="@content.Url"><span>@Model.Items[i].Name</span></a>
                            }                               
                            @Html.HiddenFor(model => model.Items[i].Key)                 
                        </td>
	                    <td class="price">@Model.Items[i].UnitPrice.ToString("C2")</td>
                        <td class="quantity">@Html.TextBoxFor(model => model.Items[i].Quantity, new { @class = "col-xs-2"})</td>
                        <td class="total">@((Model.Items[i].TotalPrice).ToString("C2"))</td>
                        <td class="delete">@Html.ActionLink("X", "RemoveItemFromBasket", "Basket", new {lineItemKey = Model.Items[i].Key}, new  { @class = "btn btn-danger"} )</td>
                    </tr>
                }
            }
                <tr>
                    <td colspan="3">Sub Total</td>
                    <td colspan="2">@Model.TotalPrice.ToString("C2")</td>
                </tr>
            </tbody>
        </table>       
	
        <div class="row">
                
            <div class="col-lg-8">
                <a href="@continueShoppingUrl">Continue Shopping</a>
            </div>
            <div  class="col-lg-4 text-right">
                <input type="submit" id="update-cart" class="btn btn-default" name="update" value="Update" />
                <a href="@checkoutStep1Url" class="btn btn-primary">Checkout</a>
            </div>
        </div>
    
	        
    }
    
}
